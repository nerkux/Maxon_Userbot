from Maxon.init import VERSION, START_TIME
from pathlib import Path
from json import load, dump

__name__ = "–†–µ–∫–≤–∏–∑–∏—Ç—ã"
__description__ = "–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –í–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"
__version__ = "1.1.0"
__author__ = "@nerkux"

REKV = "userdata//rekv.json"

def load_data():
    with open(REKV, 'r', encoding='utf-8') as f:
        return load(f)

def save_data(data):
    with open(REKV, 'w', encoding='utf-8') as f:
        dump(data, f, ensure_ascii=False, indent=2)

def add_rekv(name, value):
    data = load_data()
    next_id = 1 if not data else max(item['id'] for item in data) + 1
    data.append({'id': next_id, 'name': name, 'value': value})
    save_data(data)
    return f"‚úÖ –†–µ–∫–≤–∏–∑–∏—Ç –¥–æ–±–∞–≤–ª–µ–Ω\n\nID: {next_id}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n–ó–Ω–∞—á–µ–Ω–∏–µ: {value}"

def remove_rekv(identifier):
    if identifier == "0":
        return "‚ö†Ô∏è –†–µ–∫–≤–∏–∑–∏—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    data = load_data()
    try:
        identifier = int(identifier)
        new_data = [item for item in data if item['id'] != identifier]
    except ValueError:
        new_data = [item for item in data if item['name'] != identifier]

    if len(new_data) == len(data):
        return "‚ö†Ô∏è –†–µ–∫–≤–∏–∑–∏—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    else:

        for i, item in enumerate(new_data):
            item['id'] = i

        save_data(new_data)
        return "üóëÔ∏è –†–µ–∫–≤–∏–∑–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã"

def list_rekv():
    data = load_data()
    if not data:
        return "üì≠ –°–ø–∏—Å–æ–∫ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –ø—É—Å—Ç"
    
    lines = []
    for item in data:
        if item['id'] != 0:
            lines.append(f"{item['id']}. {item['name']}\n{item['value']}")
    return "\n\n".join(lines)


async def handle(packet, args, client):

    if args == []:
        data = load_data()
        if len(data) == 1:
            return "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ \n.rekv add [–Ω–∞–∑–≤–∞–Ω–∏–µ] [–∑–Ω–∞—á–µ–Ω–∏–µ]"
        else:
            return list_rekv()
    
    if len(args) == 3:
        if args[0] == "add" and args[1] and args[2]:
            if Path(REKV).exists():
                return add_rekv(args[1], args[2])
            
            else:
                with open(REKV, 'w', encoding='utf-8') as f:
                    f.close()
                return add_rekv(args[1], args[2])

        if args[0] == "add" and not args[1] or not args[2]:
            return "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ \n.rekv add [–Ω–∞–∑–≤–∞–Ω–∏–µ] [–∑–Ω–∞—á–µ–Ω–∏–µ]"
    if len(args) == 2:
        if args[0] == "remove" and args[1]:
            return remove_rekv(args[1])
        
        if args[0] == "remove" and not args[1]:
            return "–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ \n.rekv remove [–Ω–æ–º–µ—Ä | –Ω–∞–∑–≤–∞–Ω–∏–µ]"
    
    if len(args) >= 4:
        return "–õ–∏–±–æ –≤—ã –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –ª–∏–±–æ –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 2 –∏–ª–∏ –±–æ–ª–µ–µ —Å–ª–æ–≤(–∞) –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞\n–ï—Å–ª–∏ —ç—Ç–æ —Ç–∞–∫ ‚Äì –ø—Ä–æ—Å—Ç–æ –Ω–∞–∑–æ–≤–∏—Ç–µ_—Ä–µ–∫–≤–∏–∑–∏—Ç_—Ç–∞–∫–∏–º_–æ–±—Ä–∞–∑–æ–º"
    
    else:
        print(args)
        return "lol"

def register(handlers):
    handlers[".rekv"] = handle
